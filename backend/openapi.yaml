openapi: 3.1.0
info:
  title: FX Strategy Backend API
  version: 0.1.0
  description: API for managing strategies and running backtests for FX trading

servers:
  - url: https://api.example.com/api

paths:
  /strategies:
    get:
      summary: Get a list of strategies
      responses:
        "200":
          description: List of strategies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StrategySummary"

    post:
      summary: Create a new strategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StrategyCreateRequest"
      responses:
        "201":
          description: Strategy created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyDetail"

  /strategies/{strategyId}:
    get:
      summary: Get detailed information about a strategy
      parameters:
        - in: path
          name: strategyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Strategy detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyDetail"

  /strategies/{strategyId}/versions:
    get:
      summary: List all versions of a strategy
      parameters:
        - in: path
          name: strategyId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of strategy versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StrategyVersionSummary"

    post:
      summary: Add a new version to a strategy
      parameters:
        - in: path
          name: strategyId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StrategyVersionCreateRequest"
      responses:
        "201":
          description: New version created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyVersionDetail"

  /backtests:
    post:
      summary: Run a backtest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BacktestRequest"
      responses:
        "202":
          description: Backtest request accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestResponse"

  /backtests/{backtestId}:
    get:
      summary: Get backtest result
      parameters:
        - in: path
          name: backtestId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Backtest result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestResult"

components:
  schemas:
    StrategySummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        latestVersion:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    StrategyCreateRequest:
      type: object
      required: [name, template]
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        template:
          type: object # DSL JSON構造

    StrategyDetail:
      allOf:
        - $ref: "#/components/schemas/StrategySummary"
        - type: object
          properties:
            description:
              type: string
            tags:
              type: array
              items:
                type: string

    StrategyVersionSummary:
      type: object
      properties:
        id:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        message:
          type: string

    StrategyVersionCreateRequest:
      type: object
      required: [template]
      properties:
        message:
          type: string
        template:
          type: object

    StrategyVersionDetail:
      allOf:
        - $ref: "#/components/schemas/StrategyVersionSummary"
        - type: object
          properties:
            template:
              type: object

    BacktestRequest:
      type: object
      required: [strategyVersionId, dataSourceId, startDate, endDate]
      properties:
        strategyVersionId:
          type: string
        dataSourceId:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        settings:
          type: object
          properties:
            initialCash:
              type: number
            commission:
              type: number

    BacktestResponse:
      type: object
      properties:
        backtestId:
          type: string
        status:
          type: string
          enum: [queued, running]

    BacktestResult:
      type: object
      properties:
        status:
          type: string
          enum: [running, success, failed]
        result:
          type: object
          nullable: true
          properties:
            totalProfit:
              type: number
            trades:
              type: array
              items:
                type: object
                properties:
                  entryDate:
                    type: string
                    format: date-time
                  exitDate:
                    type: string
                    format: date-time
                  profit:
                    type: number
            dailyPnL:
              type: array
              items:
                type: number
